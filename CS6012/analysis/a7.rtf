{\rtf1\ansi\ansicpg1252\cocoartf2759
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab560
\pard\pardeftab560\slleading20\partightenfactor0

\f0\fs26 \cf0 1. Explain the hashing function you used for BadHashFunctor.\
Be sure to discuss why you expected it to perform badly (i.e.,\
result in many collisions).\
\
The hash function uses the ASCII code of the last character in the string. Strings with the same last character, they will collide\
\
2. Explain the hashing function you used for MediocreHashFunctor. Be sure to discuss why you expected it to perform moderately (i.e., result in some collisions).\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab560\slleading20\partightenfactor0
\cf0 hash = (sum of all ASCII codes) \'d7 ASCII(first character) \'d7 ASCII(last character) The function reduces collisions, such as those caused by identical character sums (e.g., \'93az\'94 and \'93by\'94), by incorporating the first and last characters.However, switched characters (e.g., \'93ac\'94 and \'93ca\'94) still result in collisions because the ASCII sum and the multiplication terms remain the same:\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab560\slleading20\partightenfactor0
\cf0 3. Explain the hashing function you used for GoodHashFunctor. Be sure to discuss why you expected it to perform well (i.e., result in few or no collisions).\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0
\cf0 \
For GoodHashFunctor, I implemented the djb2 algorithm. The algorithm uses a special constant (5381) derived experimentally and a \'93magic\'94 calculation, combining bit-shifting and addition, to create a highly varied and well-distributed set of hash values.\
\
\
\pard\pardeftab560\slleading20\partightenfactor0
\cf0 5. What is the cost of each of your three hash functions (in BigO notation)? Note that the problem size (N) for your hash functions is the length of the String, and has nothing to do with the hash table itself. Did each of your hash functions perform as you expected (i.e., do they result in the expected number of collisions)?\
\
 For BadHash, it\'92s O(1) For Mediocre Hash, it\'92s O(N) For Good hash, it\'92s O(N) Expectedly, good hash has the better performance along with the increase of the data size.}